import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os

df = pd.read_csv("C:/Users/marco/OneDrive/Desktop/QDC/Challenge/data/wave2_clustering.csv", encoding='mac_roman')

MoneyIndex = df[["Q2_multi_UniversalCredit","Q2_multi_Parents","Q2_multi_OtherRelatives","Q2_multi_Friends","Q2_multi_Colleagues",
                 "Q2_multi_Charities","Q2_multi_LocalWelfareFund","Q2_multi_PaidWork","Q2_multi_Begging","Q2_multi_Other","Q2_multi_NotApplicable",
                 "Q2_multi_PreferNotSay","Q1_multi_BenefitSanctions","Q1_multi_BenefitDelays","Q1_multi_BehindOnBills","Q1_multi_BehindOnRent",
                 "Q1_multi_SeriousDebt","Q1_multi_Evicted","Q1_multi_None","Q1_multi_RightLiveWork"]]

#we study correlation between the different variables
corr = MoneyIndex.corr(method='spearman')
columns = MoneyIndex.columns

high_corr = []
 
for c1 in columns:
  for c2 in columns:
    if c1 != c2 and corr[c1][c2] > 0.25:
      high_corr.append([c1, c2, corr[c1][c2]])
 
pd.DataFrame(data=high_corr).sort_values(by=[2], ascending=False)

#remove column
MoneyIndex = MoneyIndex.drop(columns=["Q2_multi_NotApplicable"])
MoneyIndex

weight = dict(MoneyIndex.mean())
weight

money = MoneyIndex

#We need to change the sign of 'Q1_multi_None' variable as it will have a negative impact on our Vulnerability Index (as our scale is the higher the index, the more vulnerable the individual is) 

weight['Q1_multi_None'] = -weight['Q1_multi_None']
weight

for col in money.columns:
     money[col] /= weight[col]
money

money['MoneyVulnerabilityIndex'] = money.sum(axis=1)
money

#Creation of PhysicalIndex

PhysicalIndex = df[["Q1_multi_PhysicalProb","Q1_multi_DomesticAbuse","Q1_multi_None","Q3_HealthLimitActivities","Q4_MobilityHealth"]]

corr = PhysicalIndex.corr(method='spearman')
columns = PhysicalIndex.columns

high_corr = []
 
for c1 in columns:
  for c2 in columns:
    if c1 != c2 and corr[c1][c2] > 0.25:
      high_corr.append([c1, c2, corr[c1][c2]])
 
pd.DataFrame(data=high_corr).sort_values(by=[2], ascending=False)

#We decided to remove 'Q3_HealthLimitActivities' variable as it has a correlation of 0.63 with another variable of the index.

#remove column
PhysicalIndex = PhysicalIndex.drop(columns=["Q3_HealthLimitActivities"])
PhysicalIndex

weight = dict(PhysicalIndex.mean())
weight

weight['Q1_multi_None'] = -weight['Q1_multi_None']
weight

physical = PhysicalIndex

for col in physical.columns:
     physical[col] /= weight[col]
physical

physical['PhysicalIndexVulnerabilityIndex'] = physical.sum(axis=1)
physical

#Creation of MentalIndex

MentalIndex = df[['Q6_LifeSatisfaction','Q6_LifePurpose','Q6_Happy','Q6_Anxious','Q7_NoPleasure','Q8_Depressed','Q9_MentalHealthSupport','Q10_MentalHealthSupportWaiting',
                  'Q11_Lonely', 'Q1_multi_None']]

corr = MentalIndex.corr(method='spearman')
columns = MentalIndex.columns

high_corr = []
 
for c1 in columns:
  for c2 in columns:
    if c1 != c2 and corr[c1][c2] > 0.6:
      high_corr.append([c1, c2, corr[c1][c2]])
 
pd.DataFrame(data=high_corr).sort_values(by=[2], ascending=False)

#We removed all variables with correlation above 0.6 to avoid overweighting in the index of some related variables. 

#remove column
MentalIndex = MentalIndex.drop(columns=["Q6_LifePurpose","Q6_Happy","Q7_NoPleasure","Q10_MentalHealthSupportWaiting"])
MentalIndex

#Let's look at the distributions of the variables of this index. 4 of the 6 variables have distributions outside the boundaries of [0,1]. 

fig, axis = plt.subplots(2,3,figsize=(8, 8))
MentalIndex.hist(ax=axis)


#We decided to rescale the Q9_LifeSatisfaction variable on a new scale [-5,5] where a previous 10 satisfaction score now amounts to -5 to penalize negatively the vulnerability score. And then we use the MinMax scaler function from sklearn to get a same order of magnitude as for the other [0,1] variables.
MentalIndex['Q6_LifeSatisfaction'] = np.where(MentalIndex['Q6_LifeSatisfaction'] == 5, 0, MentalIndex['Q6_LifeSatisfaction'])
MentalIndex['Q6_LifeSatisfaction'] = np.where(MentalIndex['Q6_LifeSatisfaction'] == 4, 1, MentalIndex['Q6_LifeSatisfaction'])
MentalIndex['Q6_LifeSatisfaction'] = np.where(MentalIndex['Q6_LifeSatisfaction'] == 3, 2, MentalIndex['Q6_LifeSatisfaction'])
MentalIndex['Q6_LifeSatisfaction'] = np.where(MentalIndex['Q6_LifeSatisfaction'] == 2, 3, MentalIndex['Q6_LifeSatisfaction'])
MentalIndex['Q6_LifeSatisfaction'] = np.where(MentalIndex['Q6_LifeSatisfaction'] == 1, 4, MentalIndex['Q6_LifeSatisfaction'])
MentalIndex['Q6_LifeSatisfaction'] = np.where(MentalIndex['Q6_LifeSatisfaction'] == 0, 5, MentalIndex['Q6_LifeSatisfaction'])
MentalIndex['Q6_LifeSatisfaction'] = np.where(MentalIndex['Q6_LifeSatisfaction'] == 6, -1, MentalIndex['Q6_LifeSatisfaction'])
MentalIndex['Q6_LifeSatisfaction'] = np.where(MentalIndex['Q6_LifeSatisfaction'] == 7, -2, MentalIndex['Q6_LifeSatisfaction'])
MentalIndex['Q6_LifeSatisfaction'] = np.where(MentalIndex['Q6_LifeSatisfaction'] == 8, -3, MentalIndex['Q6_LifeSatisfaction'])
MentalIndex['Q6_LifeSatisfaction'] = np.where(MentalIndex['Q6_LifeSatisfaction'] == 9, -4, MentalIndex['Q6_LifeSatisfaction'])
MentalIndex['Q6_LifeSatisfaction'] = np.where(MentalIndex['Q6_LifeSatisfaction'] == 10, -5, MentalIndex['Q6_LifeSatisfaction'])

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
scaler.fit(MentalIndex[['Q6_LifeSatisfaction']])
MentalIndex['Q6_LifeSatisfaction'] = scaler.transform(MentalIndex[['Q6_LifeSatisfaction']])
MentalIndex['Q6_LifeSatisfaction']


#same for Anxious variable but with the other way around for the sign convention
MentalIndex['Q6_Anxious'] = np.where(MentalIndex['Q6_Anxious'] == 5, 0, MentalIndex['Q6_Anxious'])
MentalIndex['Q6_Anxious'] = np.where(MentalIndex['Q6_Anxious'] == 4, -1, MentalIndex['Q6_Anxious'])
MentalIndex['Q6_Anxious'] = np.where(MentalIndex['Q6_Anxious'] == 3, -2, MentalIndex['Q6_Anxious'])
MentalIndex['Q6_Anxious'] = np.where(MentalIndex['Q6_Anxious'] == 2, -3, MentalIndex['Q6_Anxious'])
MentalIndex['Q6_Anxious'] = np.where(MentalIndex['Q6_Anxious'] == 1, -4, MentalIndex['Q6_Anxious'])
MentalIndex['Q6_Anxious'] = np.where(MentalIndex['Q6_Anxious'] == 0, -5, MentalIndex['Q6_Anxious'])
MentalIndex['Q6_Anxious'] = np.where(MentalIndex['Q6_Anxious'] == 6, 1, MentalIndex['Q6_Anxious'])
MentalIndex['Q6_Anxious'] = np.where(MentalIndex['Q6_Anxious'] == 7, 2, MentalIndex['Q6_Anxious'])
MentalIndex['Q6_Anxious'] = np.where(MentalIndex['Q6_Anxious'] == 8, 3, MentalIndex['Q6_Anxious'])
MentalIndex['Q6_Anxious'] = np.where(MentalIndex['Q6_Anxious'] == 9, 4, MentalIndex['Q6_Anxious'])
MentalIndex['Q6_Anxious'] = np.where(MentalIndex['Q6_Anxious'] == 10, 5, MentalIndex['Q6_Anxious'])

scaler = MinMaxScaler()
scaler.fit(MentalIndex[['Q6_Anxious']])
MentalIndex['Q6_Anxious'] = scaler.transform(MentalIndex[['Q6_Anxious']])
MentalIndex['Q6_Anxious']


#same for Depressed
MentalIndex['Q8_Depressed'] = np.where(MentalIndex['Q8_Depressed'] == 5, 0, MentalIndex['Q8_Depressed'])
MentalIndex['Q8_Depressed'] = np.where(MentalIndex['Q8_Depressed'] == 4, -1, MentalIndex['Q8_Depressed'])
MentalIndex['Q8_Depressed'] = np.where(MentalIndex['Q8_Depressed'] == 3, -2, MentalIndex['Q8_Depressed'])
MentalIndex['Q8_Depressed'] = np.where(MentalIndex['Q8_Depressed'] == 2, -3, MentalIndex['Q8_Depressed'])
MentalIndex['Q8_Depressed'] = np.where(MentalIndex['Q8_Depressed'] == 1, -4, MentalIndex['Q8_Depressed'])
MentalIndex['Q8_Depressed'] = np.where(MentalIndex['Q8_Depressed'] == 0, -5, MentalIndex['Q8_Depressed'])
MentalIndex['Q8_Depressed'] = np.where(MentalIndex['Q8_Depressed'] == 6, 1, MentalIndex['Q8_Depressed'])
MentalIndex['Q8_Depressed'] = np.where(MentalIndex['Q8_Depressed'] == 7, 2, MentalIndex['Q8_Depressed'])
MentalIndex['Q8_Depressed'] = np.where(MentalIndex['Q8_Depressed'] == 8, 3, MentalIndex['Q8_Depressed'])
MentalIndex['Q8_Depressed'] = np.where(MentalIndex['Q8_Depressed'] == 9, 4, MentalIndex['Q8_Depressed'])
MentalIndex['Q8_Depressed'] = np.where(MentalIndex['Q8_Depressed'] == 10, 5, MentalIndex['Q8_Depressed'])

scaler = MinMaxScaler()
scaler.fit(MentalIndex[['Q8_Depressed']])
MentalIndex['Q8_Depressed'] = scaler.transform(MentalIndex[['Q8_Depressed']])
MentalIndex['Q8_Depressed']


#same for Lonely
MentalIndex['Q11_Lonely'] = np.where(MentalIndex['Q11_Lonely'] == 5, 0, MentalIndex['Q11_Lonely'])
MentalIndex['Q11_Lonely'] = np.where(MentalIndex['Q11_Lonely'] == 4, -1, MentalIndex['Q11_Lonely'])
MentalIndex['Q11_Lonely'] = np.where(MentalIndex['Q11_Lonely'] == 3, -2, MentalIndex['Q11_Lonely'])
MentalIndex['Q11_Lonely'] = np.where(MentalIndex['Q11_Lonely'] == 2, -3, MentalIndex['Q11_Lonely'])
MentalIndex['Q11_Lonely'] = np.where(MentalIndex['Q11_Lonely'] == 1, -4, MentalIndex['Q11_Lonely'])
MentalIndex['Q11_Lonely'] = np.where(MentalIndex['Q11_Lonely'] == 0, -5, MentalIndex['Q11_Lonely'])
MentalIndex['Q11_Lonely'] = np.where(MentalIndex['Q11_Lonely'] == 6, 1, MentalIndex['Q11_Lonely'])
MentalIndex['Q11_Lonely'] = np.where(MentalIndex['Q11_Lonely'] == 7, 2, MentalIndex['Q11_Lonely'])
MentalIndex['Q11_Lonely'] = np.where(MentalIndex['Q11_Lonely'] == 8, 3, MentalIndex['Q11_Lonely'])
MentalIndex['Q11_Lonely'] = np.where(MentalIndex['Q11_Lonely'] == 9, 4, MentalIndex['Q11_Lonely'])
MentalIndex['Q11_Lonely'] = np.where(MentalIndex['Q11_Lonely'] == 10, 5, MentalIndex['Q11_Lonely'])

scaler = MinMaxScaler()
scaler.fit(MentalIndex[['Q11_Lonely']])
MentalIndex['Q11_Lonely'] = scaler.transform(MentalIndex[['Q11_Lonely']])
MentalIndex['Q11_Lonely']

weight = dict(MentalIndex.mean())
weight

weight['Q1_multi_None'] = -weight['Q1_multi_None']
weight

mental = MentalIndex

for col in mental.columns:
     mental[col] /= weight[col]
mental

mental['MentalIndexVulnerabilityIndex'] = mental.sum(axis=1)
mental

#Creation of the new dataset with the Vulnerability Indexes

data = [MoneyIndex['MoneyVulnerabilityIndex'], PhysicalIndex['PhysicalIndexVulnerabilityIndex'], MentalIndex['MentalIndexVulnerabilityIndex']]
indexes= pd.concat(data, axis=1, keys=['MoneyVulnerabilityIndex','PhysicalIndexVulnerabilityIndex','MentalIndexVulnerabilityIndex'])
indexes

#root_path = 'gdrive/My Drive/GBAC/Final Cleaning/'
#filename = root_path + "brc-vulnerability-survey-wave-2_final_cleaning.xlsx"
#df = pd.read_excel(filename)
#df

#df = pd.concat([df, indexes], axis=1)
#df


#df.to_csv('brc-map-VulnerabilityIndex_Wave2.csv', encoding = 'utf-8-sig') 
#files.download('brc-map-VulnerabilityIndex_Wave2.csv')