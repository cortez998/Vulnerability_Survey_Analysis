import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import scipy.stats as stats

wave1 = pd.read_csv("C:/Users/marco/OneDrive/Desktop/QDC/Challenge/data/t_testing/Indexes_t_testing_wave1.csv", encoding='mac_roman')

wave2 = pd.read_csv("C:/Users/marco/OneDrive/Desktop/QDC/Challenge/data/t_testing/Indexes_t_testing_wave2.csv", encoding='mac_roman')

wave2.drop('NoChildren', axis=1, inplace=True)
wave2['Number_of_Children'] = wave2.iloc[:,7:15].sum(axis=1)
wave2.drop(wave2.iloc[:,7:15], axis=1, inplace=True)


#Created a new region 'London' 

wave1.loc[wave1['Nearest_City'] == 'London', 'Region'] = 'London'

cities = wave1['Nearest_City'].unique().tolist()

#We create a dictionary and each key of the dictionary has a dataframe with the
#different instances related to the different regions

dic_wave1 = {}
for city in cities:
    dic_wave1[city] = wave1.loc[wave1['Nearest_City'] == city]

dic_wave2 = {}
for city in cities:
    dic_wave2[city] = wave2.loc[wave2['Nearest_City'] == city]

#test for SocioEconomicVulnerabilityIndex

t_value = []
p_value = []

for city in cities:
    test = stats.ttest_ind(a=dic_wave1[city]['SocioEconomicVulnerabilityIndex'], 
                b=dic_wave2[city]['SocioEconomicVulnerabilityIndex'],
                equal_var=False)
    t_value.append(test.statistic)
    p_value.append(test.pvalue)
    
Socioeconomic_Index_Test = pd.DataFrame(data={'City': cities, 't-value':t_value,
                                              'p-value':p_value})


#test for PhysicalVulnerabilityIndex

t_value = []
p_value = []

for city in cities:
    test = stats.ttest_ind(a=dic_wave1[city]['PhysicalIndexVulnerabilityIndex'], 
                b=dic_wave2[city]['PhysicalIndexVulnerabilityIndex'],
                equal_var=False)
    t_value.append(test.statistic)
    p_value.append(test.pvalue)
    
Physical_Index_Test = pd.DataFrame(data={'City': cities, 't-value':t_value,
                                              'p-value':p_value})

#test for MentalVulnerabilityIndex

t_value = []
p_value = []

for city in cities:
    test = stats.ttest_ind(a=dic_wave1[city]['MentalIndexVulnerabilityIndex'], 
                b=dic_wave2[city]['MentalIndexVulnerabilityIndex'],
                equal_var=False)
    t_value.append(test.statistic)
    p_value.append(test.pvalue)
    
Mental_Index_Test = pd.DataFrame(data={'City': cities, 't-value':t_value,
                                              'p-value':p_value})


Socioeconomic_Index_Test.to_csv(r"C:/Users/marco/OneDrive/Desktop/QDC/Challenge/data/Socioeconomic_Index_Test.csv", index = False)
